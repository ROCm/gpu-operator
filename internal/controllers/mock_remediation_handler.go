/*
Copyright (c) Advanced Micro Devices, Inc. All rights reserved.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by MockGen. DO NOT EDIT.
// Source: remediation_handler.go
//
// Generated by this command:
//
//	mockgen -source=remediation_handler.go -package=controllers -destination=mock_remediation_handler.go remediationMgrHelperAPI
//
// Package controllers is a generated GoMock package.
package controllers

import (
	context "context"
	reflect "reflect"

	v1alpha1 "github.com/ROCm/gpu-operator/api/v1alpha1"
	v1alpha10 "github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1"
	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/api/core/v1"
	controllerruntime "sigs.k8s.io/controller-runtime"
)

// MockremediationMgrAPI is a mock of remediationMgrAPI interface.
type MockremediationMgrAPI struct {
	ctrl     *gomock.Controller
	recorder *MockremediationMgrAPIMockRecorder
}

// MockremediationMgrAPIMockRecorder is the mock recorder for MockremediationMgrAPI.
type MockremediationMgrAPIMockRecorder struct {
	mock *MockremediationMgrAPI
}

// NewMockremediationMgrAPI creates a new mock instance.
func NewMockremediationMgrAPI(ctrl *gomock.Controller) *MockremediationMgrAPI {
	mock := &MockremediationMgrAPI{ctrl: ctrl}
	mock.recorder = &MockremediationMgrAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockremediationMgrAPI) EXPECT() *MockremediationMgrAPIMockRecorder {
	return m.recorder
}

// HandleDelete mocks base method.
func (m *MockremediationMgrAPI) HandleDelete(ctx context.Context, deviceConfig *v1alpha1.DeviceConfig, nodes *v1.NodeList) (controllerruntime.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleDelete", ctx, deviceConfig, nodes)
	ret0, _ := ret[0].(controllerruntime.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleDelete indicates an expected call of HandleDelete.
func (mr *MockremediationMgrAPIMockRecorder) HandleDelete(ctx, deviceConfig, nodes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleDelete", reflect.TypeOf((*MockremediationMgrAPI)(nil).HandleDelete), ctx, deviceConfig, nodes)
}

// HandleRemediation mocks base method.
func (m *MockremediationMgrAPI) HandleRemediation(ctx context.Context, deviceConfig *v1alpha1.DeviceConfig, nodes *v1.NodeList) (controllerruntime.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleRemediation", ctx, deviceConfig, nodes)
	ret0, _ := ret[0].(controllerruntime.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleRemediation indicates an expected call of HandleRemediation.
func (mr *MockremediationMgrAPIMockRecorder) HandleRemediation(ctx, deviceConfig, nodes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRemediation", reflect.TypeOf((*MockremediationMgrAPI)(nil).HandleRemediation), ctx, deviceConfig, nodes)
}

// MockremediationMgrHelperAPI is a mock of remediationMgrHelperAPI interface.
type MockremediationMgrHelperAPI struct {
	ctrl     *gomock.Controller
	recorder *MockremediationMgrHelperAPIMockRecorder
}

// MockremediationMgrHelperAPIMockRecorder is the mock recorder for MockremediationMgrHelperAPI.
type MockremediationMgrHelperAPIMockRecorder struct {
	mock *MockremediationMgrHelperAPI
}

// NewMockremediationMgrHelperAPI creates a new mock instance.
func NewMockremediationMgrHelperAPI(ctrl *gomock.Controller) *MockremediationMgrHelperAPI {
	mock := &MockremediationMgrHelperAPI{ctrl: ctrl}
	mock.recorder = &MockremediationMgrHelperAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockremediationMgrHelperAPI) EXPECT() *MockremediationMgrHelperAPIMockRecorder {
	return m.recorder
}

// checkIfTaintExists mocks base method.
func (m *MockremediationMgrHelperAPI) checkIfTaintExists(node *v1.Node, targetTaint v1.Taint) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "checkIfTaintExists", node, targetTaint)
	ret0, _ := ret[0].(bool)
	return ret0
}

// checkIfTaintExists indicates an expected call of checkIfTaintExists.
func (mr *MockremediationMgrHelperAPIMockRecorder) checkIfTaintExists(node, targetTaint any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "checkIfTaintExists", reflect.TypeOf((*MockremediationMgrHelperAPI)(nil).checkIfTaintExists), node, targetTaint)
}

// createDefaultConfigMap mocks base method.
func (m *MockremediationMgrHelperAPI) createDefaultConfigMap(ctx context.Context, name, namespace string) (*v1.ConfigMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "createDefaultConfigMap", ctx, name, namespace)
	ret0, _ := ret[0].(*v1.ConfigMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// createDefaultConfigMap indicates an expected call of createDefaultConfigMap.
func (mr *MockremediationMgrHelperAPIMockRecorder) createDefaultConfigMap(ctx, name, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createDefaultConfigMap", reflect.TypeOf((*MockremediationMgrHelperAPI)(nil).createDefaultConfigMap), ctx, name, namespace)
}

// createDefaultObjects mocks base method.
func (m *MockremediationMgrHelperAPI) createDefaultObjects(ctx context.Context, devConfig *v1alpha1.DeviceConfig) (*v1.ConfigMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "createDefaultObjects", ctx, devConfig)
	ret0, _ := ret[0].(*v1.ConfigMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// createDefaultObjects indicates an expected call of createDefaultObjects.
func (mr *MockremediationMgrHelperAPIMockRecorder) createDefaultObjects(ctx, devConfig any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createDefaultObjects", reflect.TypeOf((*MockremediationMgrHelperAPI)(nil).createDefaultObjects), ctx, devConfig)
}

// createDefaultWorkflowTemplate mocks base method.
func (m *MockremediationMgrHelperAPI) createDefaultWorkflowTemplate(ctx context.Context, namespace string) (*v1alpha10.WorkflowTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "createDefaultWorkflowTemplate", ctx, namespace)
	ret0, _ := ret[0].(*v1alpha10.WorkflowTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// createDefaultWorkflowTemplate indicates an expected call of createDefaultWorkflowTemplate.
func (mr *MockremediationMgrHelperAPIMockRecorder) createDefaultWorkflowTemplate(ctx, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createDefaultWorkflowTemplate", reflect.TypeOf((*MockremediationMgrHelperAPI)(nil).createDefaultWorkflowTemplate), ctx, namespace)
}

// createWorkflow mocks base method.
func (m *MockremediationMgrHelperAPI) createWorkflow(ctx context.Context, workflow *v1alpha10.Workflow) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "createWorkflow", ctx, workflow)
	ret0, _ := ret[0].(error)
	return ret0
}

// createWorkflow indicates an expected call of createWorkflow.
func (mr *MockremediationMgrHelperAPIMockRecorder) createWorkflow(ctx, workflow any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createWorkflow", reflect.TypeOf((*MockremediationMgrHelperAPI)(nil).createWorkflow), ctx, workflow)
}

// deleteConfigMap mocks base method.
func (m *MockremediationMgrHelperAPI) deleteConfigMap(ctx context.Context, name, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "deleteConfigMap", ctx, name, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// deleteConfigMap indicates an expected call of deleteConfigMap.
func (mr *MockremediationMgrHelperAPIMockRecorder) deleteConfigMap(ctx, name, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "deleteConfigMap", reflect.TypeOf((*MockremediationMgrHelperAPI)(nil).deleteConfigMap), ctx, name, namespace)
}

// deleteWorkflow mocks base method.
func (m *MockremediationMgrHelperAPI) deleteWorkflow(ctx context.Context, workflow *v1alpha10.Workflow) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "deleteWorkflow", ctx, workflow)
	ret0, _ := ret[0].(error)
	return ret0
}

// deleteWorkflow indicates an expected call of deleteWorkflow.
func (mr *MockremediationMgrHelperAPIMockRecorder) deleteWorkflow(ctx, workflow any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "deleteWorkflow", reflect.TypeOf((*MockremediationMgrHelperAPI)(nil).deleteWorkflow), ctx, workflow)
}

// getConfigMap mocks base method.
func (m *MockremediationMgrHelperAPI) getConfigMap(ctx context.Context, configmapName, namespace string) (*v1.ConfigMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getConfigMap", ctx, configmapName, namespace)
	ret0, _ := ret[0].(*v1.ConfigMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getConfigMap indicates an expected call of getConfigMap.
func (mr *MockremediationMgrHelperAPIMockRecorder) getConfigMap(ctx, configmapName, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getConfigMap", reflect.TypeOf((*MockremediationMgrHelperAPI)(nil).getConfigMap), ctx, configmapName, namespace)
}

// getWorkflowList mocks base method.
func (m *MockremediationMgrHelperAPI) getWorkflowList(ctx context.Context, namespace string) (*v1alpha10.WorkflowList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getWorkflowList", ctx, namespace)
	ret0, _ := ret[0].(*v1alpha10.WorkflowList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getWorkflowList indicates an expected call of getWorkflowList.
func (mr *MockremediationMgrHelperAPIMockRecorder) getWorkflowList(ctx, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getWorkflowList", reflect.TypeOf((*MockremediationMgrHelperAPI)(nil).getWorkflowList), ctx, namespace)
}

// getWorkflowTemplate mocks base method.
func (m *MockremediationMgrHelperAPI) getWorkflowTemplate(ctx context.Context, workflowTemplateName, namespace string) (*v1alpha10.WorkflowTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getWorkflowTemplate", ctx, workflowTemplateName, namespace)
	ret0, _ := ret[0].(*v1alpha10.WorkflowTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getWorkflowTemplate indicates an expected call of getWorkflowTemplate.
func (mr *MockremediationMgrHelperAPIMockRecorder) getWorkflowTemplate(ctx, workflowTemplateName, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getWorkflowTemplate", reflect.TypeOf((*MockremediationMgrHelperAPI)(nil).getWorkflowTemplate), ctx, workflowTemplateName, namespace)
}

// isDriverUpgradeInProgress mocks base method.
func (m *MockremediationMgrHelperAPI) isDriverUpgradeInProgress(devCfg *v1alpha1.DeviceConfig, node *v1.Node) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "isDriverUpgradeInProgress", devCfg, node)
	ret0, _ := ret[0].(bool)
	return ret0
}

// isDriverUpgradeInProgress indicates an expected call of isDriverUpgradeInProgress.
func (mr *MockremediationMgrHelperAPIMockRecorder) isDriverUpgradeInProgress(devCfg, node any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isDriverUpgradeInProgress", reflect.TypeOf((*MockremediationMgrHelperAPI)(nil).isDriverUpgradeInProgress), devCfg, node)
}

// isRemediationDisabled mocks base method.
func (m *MockremediationMgrHelperAPI) isRemediationDisabled(ctx context.Context, devConfig *v1alpha1.DeviceConfig) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "isRemediationDisabled", ctx, devConfig)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// isRemediationDisabled indicates an expected call of isRemediationDisabled.
func (mr *MockremediationMgrHelperAPIMockRecorder) isRemediationDisabled(ctx, devConfig any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isRemediationDisabled", reflect.TypeOf((*MockremediationMgrHelperAPI)(nil).isRemediationDisabled), ctx, devConfig)
}

// populateWorkflow mocks base method.
func (m *MockremediationMgrHelperAPI) populateWorkflow(ctx context.Context, wfTemplate *v1alpha10.WorkflowTemplate, mapping *ConditionWorkflowMapping, nodeName string, devCfg *v1alpha1.DeviceConfig) *v1alpha10.Workflow {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "populateWorkflow", ctx, wfTemplate, mapping, nodeName, devCfg)
	ret0, _ := ret[0].(*v1alpha10.Workflow)
	return ret0
}

// populateWorkflow indicates an expected call of populateWorkflow.
func (mr *MockremediationMgrHelperAPIMockRecorder) populateWorkflow(ctx, wfTemplate, mapping, nodeName, devCfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "populateWorkflow", reflect.TypeOf((*MockremediationMgrHelperAPI)(nil).populateWorkflow), ctx, wfTemplate, mapping, nodeName, devCfg)
}

// resumeSuspendedWorkflow mocks base method.
func (m *MockremediationMgrHelperAPI) resumeSuspendedWorkflow(ctx context.Context, wfName, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "resumeSuspendedWorkflow", ctx, wfName, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// resumeSuspendedWorkflow indicates an expected call of resumeSuspendedWorkflow.
func (mr *MockremediationMgrHelperAPIMockRecorder) resumeSuspendedWorkflow(ctx, wfName, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "resumeSuspendedWorkflow", reflect.TypeOf((*MockremediationMgrHelperAPI)(nil).resumeSuspendedWorkflow), ctx, wfName, namespace)
}
