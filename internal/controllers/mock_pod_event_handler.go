/*
Copyright (c) Advanced Micro Devices, Inc. All rights reserved.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by MockGen. DO NOT EDIT.
// Source: pod_event_handler.go
//
// Generated by this command:
//
//	mockgen -source=pod_event_handler.go -package=controllers -destination=mock_pod_event_handler.go podEventHandlerAPI
//
// Package controllers is a generated GoMock package.
package controllers

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	workqueue "k8s.io/client-go/util/workqueue"
	client "sigs.k8s.io/controller-runtime/pkg/client"
	event "sigs.k8s.io/controller-runtime/pkg/event"
	reconcile "sigs.k8s.io/controller-runtime/pkg/reconcile"
)

// MockpodEventHandlerAPI is a mock of podEventHandlerAPI interface.
type MockpodEventHandlerAPI struct {
	ctrl     *gomock.Controller
	recorder *MockpodEventHandlerAPIMockRecorder
}

// MockpodEventHandlerAPIMockRecorder is the mock recorder for MockpodEventHandlerAPI.
type MockpodEventHandlerAPIMockRecorder struct {
	mock *MockpodEventHandlerAPI
}

// NewMockpodEventHandlerAPI creates a new mock instance.
func NewMockpodEventHandlerAPI(ctrl *gomock.Controller) *MockpodEventHandlerAPI {
	mock := &MockpodEventHandlerAPI{ctrl: ctrl}
	mock.recorder = &MockpodEventHandlerAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpodEventHandlerAPI) EXPECT() *MockpodEventHandlerAPIMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockpodEventHandlerAPI) Create(arg0 context.Context, arg1 event.TypedCreateEvent[client.Object], arg2 workqueue.TypedRateLimitingInterface[reconcile.Request]) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Create", arg0, arg1, arg2)
}

// Create indicates an expected call of Create.
func (mr *MockpodEventHandlerAPIMockRecorder) Create(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockpodEventHandlerAPI)(nil).Create), arg0, arg1, arg2)
}

// Delete mocks base method.
func (m *MockpodEventHandlerAPI) Delete(arg0 context.Context, arg1 event.TypedDeleteEvent[client.Object], arg2 workqueue.TypedRateLimitingInterface[reconcile.Request]) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
}

// Delete indicates an expected call of Delete.
func (mr *MockpodEventHandlerAPIMockRecorder) Delete(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockpodEventHandlerAPI)(nil).Delete), arg0, arg1, arg2)
}

// Generic mocks base method.
func (m *MockpodEventHandlerAPI) Generic(arg0 context.Context, arg1 event.TypedGenericEvent[client.Object], arg2 workqueue.TypedRateLimitingInterface[reconcile.Request]) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Generic", arg0, arg1, arg2)
}

// Generic indicates an expected call of Generic.
func (mr *MockpodEventHandlerAPIMockRecorder) Generic(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockpodEventHandlerAPI)(nil).Generic), arg0, arg1, arg2)
}

// Update mocks base method.
func (m *MockpodEventHandlerAPI) Update(arg0 context.Context, arg1 event.TypedUpdateEvent[client.Object], arg2 workqueue.TypedRateLimitingInterface[reconcile.Request]) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Update", arg0, arg1, arg2)
}

// Update indicates an expected call of Update.
func (mr *MockpodEventHandlerAPIMockRecorder) Update(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockpodEventHandlerAPI)(nil).Update), arg0, arg1, arg2)
}
