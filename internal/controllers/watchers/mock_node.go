/*
Copyright (c) Advanced Micro Devices, Inc. All rights reserved.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by MockGen. DO NOT EDIT.
// Source: node.go
//
// Generated by this command:
//
//	mockgen -source=node.go -package=watchers -destination=mock_node.go NodeEventHandlerAPI
//
// Package watchers is a generated GoMock package.
package watchers

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	workqueue "k8s.io/client-go/util/workqueue"
	event "sigs.k8s.io/controller-runtime/pkg/event"
	reconcile "sigs.k8s.io/controller-runtime/pkg/reconcile"
)

// MockNodeEventHandlerAPI is a mock of NodeEventHandlerAPI interface.
type MockNodeEventHandlerAPI struct {
	ctrl     *gomock.Controller
	recorder *MockNodeEventHandlerAPIMockRecorder
}

// MockNodeEventHandlerAPIMockRecorder is the mock recorder for MockNodeEventHandlerAPI.
type MockNodeEventHandlerAPIMockRecorder struct {
	mock *MockNodeEventHandlerAPI
}

// NewMockNodeEventHandlerAPI creates a new mock instance.
func NewMockNodeEventHandlerAPI(ctrl *gomock.Controller) *MockNodeEventHandlerAPI {
	mock := &MockNodeEventHandlerAPI{ctrl: ctrl}
	mock.recorder = &MockNodeEventHandlerAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeEventHandlerAPI) EXPECT() *MockNodeEventHandlerAPIMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockNodeEventHandlerAPI) Create(ctx context.Context, evt event.CreateEvent, q workqueue.TypedRateLimitingInterface[reconcile.Request]) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Create", ctx, evt, q)
}

// Create indicates an expected call of Create.
func (mr *MockNodeEventHandlerAPIMockRecorder) Create(ctx, evt, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNodeEventHandlerAPI)(nil).Create), ctx, evt, q)
}

// Delete mocks base method.
func (m *MockNodeEventHandlerAPI) Delete(ctx context.Context, evt event.DeleteEvent, q workqueue.TypedRateLimitingInterface[reconcile.Request]) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", ctx, evt, q)
}

// Delete indicates an expected call of Delete.
func (mr *MockNodeEventHandlerAPIMockRecorder) Delete(ctx, evt, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockNodeEventHandlerAPI)(nil).Delete), ctx, evt, q)
}

// Generic mocks base method.
func (m *MockNodeEventHandlerAPI) Generic(ctx context.Context, evt event.GenericEvent, q workqueue.TypedRateLimitingInterface[reconcile.Request]) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Generic", ctx, evt, q)
}

// Generic indicates an expected call of Generic.
func (mr *MockNodeEventHandlerAPIMockRecorder) Generic(ctx, evt, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockNodeEventHandlerAPI)(nil).Generic), ctx, evt, q)
}

// Update mocks base method.
func (m *MockNodeEventHandlerAPI) Update(ctx context.Context, evt event.UpdateEvent, q workqueue.TypedRateLimitingInterface[reconcile.Request]) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Update", ctx, evt, q)
}

// Update indicates an expected call of Update.
func (mr *MockNodeEventHandlerAPIMockRecorder) Update(ctx, evt, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockNodeEventHandlerAPI)(nil).Update), ctx, evt, q)
}
