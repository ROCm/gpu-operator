/*
Copyright (c) Advanced Micro Devices, Inc. All rights reserved.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by MockGen. DO NOT EDIT.
// Source: workermgr.go
//
// Generated by this command:
//
//	mockgen -source=workermgr.go -package=workermgr -destination=mock_workermgr.go WorkerMgrAPI
//
// Package workermgr is a generated GoMock package.
package workermgr

import (
	context "context"
	reflect "reflect"

	v1alpha1 "github.com/ROCm/gpu-operator/api/v1alpha1"
	logr "github.com/go-logr/logr"
	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/api/core/v1"
	types "k8s.io/apimachinery/pkg/types"
)

// MockWorkerMgrAPI is a mock of WorkerMgrAPI interface.
type MockWorkerMgrAPI struct {
	ctrl     *gomock.Controller
	recorder *MockWorkerMgrAPIMockRecorder
}

// MockWorkerMgrAPIMockRecorder is the mock recorder for MockWorkerMgrAPI.
type MockWorkerMgrAPIMockRecorder struct {
	mock *MockWorkerMgrAPI
}

// NewMockWorkerMgrAPI creates a new mock instance.
func NewMockWorkerMgrAPI(ctrl *gomock.Controller) *MockWorkerMgrAPI {
	mock := &MockWorkerMgrAPI{ctrl: ctrl}
	mock.recorder = &MockWorkerMgrAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkerMgrAPI) EXPECT() *MockWorkerMgrAPIMockRecorder {
	return m.recorder
}

// AddWorkReadyLabel mocks base method.
func (m *MockWorkerMgrAPI) AddWorkReadyLabel(ctx context.Context, logger logr.Logger, nsn types.NamespacedName, pod *v1.Pod) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddWorkReadyLabel", ctx, logger, nsn, pod)
}

// AddWorkReadyLabel indicates an expected call of AddWorkReadyLabel.
func (mr *MockWorkerMgrAPIMockRecorder) AddWorkReadyLabel(ctx, logger, nsn, pod any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWorkReadyLabel", reflect.TypeOf((*MockWorkerMgrAPI)(nil).AddWorkReadyLabel), ctx, logger, nsn, pod)
}

// Cleanup mocks base method.
func (m *MockWorkerMgrAPI) Cleanup(ctx context.Context, devConfig *v1alpha1.DeviceConfig, node *v1.Node) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cleanup", ctx, devConfig, node)
	ret0, _ := ret[0].(error)
	return ret0
}

// Cleanup indicates an expected call of Cleanup.
func (mr *MockWorkerMgrAPIMockRecorder) Cleanup(ctx, devConfig, node any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cleanup", reflect.TypeOf((*MockWorkerMgrAPI)(nil).Cleanup), ctx, devConfig, node)
}

// GetWorkReadyLabel mocks base method.
func (m *MockWorkerMgrAPI) GetWorkReadyLabel(nsn types.NamespacedName) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkReadyLabel", nsn)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetWorkReadyLabel indicates an expected call of GetWorkReadyLabel.
func (mr *MockWorkerMgrAPIMockRecorder) GetWorkReadyLabel(nsn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkReadyLabel", reflect.TypeOf((*MockWorkerMgrAPI)(nil).GetWorkReadyLabel), nsn)
}

// GetWorkerPod mocks base method.
func (m *MockWorkerMgrAPI) GetWorkerPod(ctx context.Context, devConfig *v1alpha1.DeviceConfig, node *v1.Node) (*v1.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkerPod", ctx, devConfig, node)
	ret0, _ := ret[0].(*v1.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkerPod indicates an expected call of GetWorkerPod.
func (mr *MockWorkerMgrAPIMockRecorder) GetWorkerPod(ctx, devConfig, node any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkerPod", reflect.TypeOf((*MockWorkerMgrAPI)(nil).GetWorkerPod), ctx, devConfig, node)
}

// RemoveWorkReadyLabel mocks base method.
func (m *MockWorkerMgrAPI) RemoveWorkReadyLabel(ctx context.Context, logger logr.Logger, nsn types.NamespacedName, pod *v1.Pod) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveWorkReadyLabel", ctx, logger, nsn, pod)
}

// RemoveWorkReadyLabel indicates an expected call of RemoveWorkReadyLabel.
func (mr *MockWorkerMgrAPIMockRecorder) RemoveWorkReadyLabel(ctx, logger, nsn, pod any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveWorkReadyLabel", reflect.TypeOf((*MockWorkerMgrAPI)(nil).RemoveWorkReadyLabel), ctx, logger, nsn, pod)
}

// Work mocks base method.
func (m *MockWorkerMgrAPI) Work(ctx context.Context, devConfig *v1alpha1.DeviceConfig, node *v1.Node) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Work", ctx, devConfig, node)
	ret0, _ := ret[0].(error)
	return ret0
}

// Work indicates an expected call of Work.
func (mr *MockWorkerMgrAPIMockRecorder) Work(ctx, devConfig, node any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Work", reflect.TypeOf((*MockWorkerMgrAPI)(nil).Work), ctx, devConfig, node)
}
