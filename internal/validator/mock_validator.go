/*
Copyright (c) Advanced Micro Devices, Inc. All rights reserved.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by MockGen. DO NOT EDIT.
// Source: validator.go
//
// Generated by this command:
//
//	mockgen -source=validator.go -package=validator -destination=mock_validator.go ValidatorAPI
//
// Package validator is a generated GoMock package.
package validator

import (
	context "context"
	reflect "reflect"

	v1alpha1 "github.com/ROCm/gpu-operator/api/v1alpha1"
	gomock "go.uber.org/mock/gomock"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockValidatorAPI is a mock of ValidatorAPI interface.
type MockValidatorAPI struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorAPIMockRecorder
}

// MockValidatorAPIMockRecorder is the mock recorder for MockValidatorAPI.
type MockValidatorAPIMockRecorder struct {
	mock *MockValidatorAPI
}

// NewMockValidatorAPI creates a new mock instance.
func NewMockValidatorAPI(ctrl *gomock.Controller) *MockValidatorAPI {
	mock := &MockValidatorAPI{ctrl: ctrl}
	mock.recorder = &MockValidatorAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValidatorAPI) EXPECT() *MockValidatorAPIMockRecorder {
	return m.recorder
}

// ValidateDeviceConfigAll mocks base method.
func (m *MockValidatorAPI) ValidateDeviceConfigAll(ctx context.Context, client client.Client, devConfig *v1alpha1.DeviceConfig) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateDeviceConfigAll", ctx, client, devConfig)
	ret0, _ := ret[0].([]string)
	return ret0
}

// ValidateDeviceConfigAll indicates an expected call of ValidateDeviceConfigAll.
func (mr *MockValidatorAPIMockRecorder) ValidateDeviceConfigAll(ctx, client, devConfig any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateDeviceConfigAll", reflect.TypeOf((*MockValidatorAPI)(nil).ValidateDeviceConfigAll), ctx, client, devConfig)
}

// ValidateDeviceConfigSpec mocks base method.
func (m *MockValidatorAPI) ValidateDeviceConfigSpec(ctx context.Context, client client.Client, devConfig *v1alpha1.DeviceConfig, specs []string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateDeviceConfigSpec", ctx, client, devConfig, specs)
	ret0, _ := ret[0].([]string)
	return ret0
}

// ValidateDeviceConfigSpec indicates an expected call of ValidateDeviceConfigSpec.
func (mr *MockValidatorAPIMockRecorder) ValidateDeviceConfigSpec(ctx, client, devConfig, specs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateDeviceConfigSpec", reflect.TypeOf((*MockValidatorAPI)(nil).ValidateDeviceConfigSpec), ctx, client, devConfig, specs)
}
