/*
Copyright (c) Advanced Micro Devices, Inc. All rights reserved.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by MockGen. DO NOT EDIT.
// Source: metricsexporter.go
//
// Generated by this command:
//
//	mockgen -source=metricsexporter.go -package=metricsexporter -destination=mock_metricsexporter.go MetricsExporter
//
// Package metricsexporter is a generated GoMock package.
package metricsexporter

import (
	reflect "reflect"

	v1alpha1 "github.com/ROCm/gpu-operator/api/v1alpha1"
	v1 "github.com/prometheus-operator/prometheus-operator/pkg/apis/monitoring/v1"
	gomock "go.uber.org/mock/gomock"
	v10 "k8s.io/api/apps/v1"
	v11 "k8s.io/api/core/v1"
)

// MockMetricsExporter is a mock of MetricsExporter interface.
type MockMetricsExporter struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsExporterMockRecorder
}

// MockMetricsExporterMockRecorder is the mock recorder for MockMetricsExporter.
type MockMetricsExporterMockRecorder struct {
	mock *MockMetricsExporter
}

// NewMockMetricsExporter creates a new mock instance.
func NewMockMetricsExporter(ctrl *gomock.Controller) *MockMetricsExporter {
	mock := &MockMetricsExporter{ctrl: ctrl}
	mock.recorder = &MockMetricsExporterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsExporter) EXPECT() *MockMetricsExporterMockRecorder {
	return m.recorder
}

// SetMetricsExporterAsDesired mocks base method.
func (m *MockMetricsExporter) SetMetricsExporterAsDesired(ds *v10.DaemonSet, devConfig *v1alpha1.DeviceConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMetricsExporterAsDesired", ds, devConfig)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMetricsExporterAsDesired indicates an expected call of SetMetricsExporterAsDesired.
func (mr *MockMetricsExporterMockRecorder) SetMetricsExporterAsDesired(ds, devConfig any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMetricsExporterAsDesired", reflect.TypeOf((*MockMetricsExporter)(nil).SetMetricsExporterAsDesired), ds, devConfig)
}

// SetMetricsServiceAsDesired mocks base method.
func (m *MockMetricsExporter) SetMetricsServiceAsDesired(svc *v11.Service, devConfig *v1alpha1.DeviceConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMetricsServiceAsDesired", svc, devConfig)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMetricsServiceAsDesired indicates an expected call of SetMetricsServiceAsDesired.
func (mr *MockMetricsExporterMockRecorder) SetMetricsServiceAsDesired(svc, devConfig any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMetricsServiceAsDesired", reflect.TypeOf((*MockMetricsExporter)(nil).SetMetricsServiceAsDesired), svc, devConfig)
}

// SetServiceMonitorAsDesired mocks base method.
func (m *MockMetricsExporter) SetServiceMonitorAsDesired(sm *v1.ServiceMonitor, devConfig *v1alpha1.DeviceConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetServiceMonitorAsDesired", sm, devConfig)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetServiceMonitorAsDesired indicates an expected call of SetServiceMonitorAsDesired.
func (mr *MockMetricsExporterMockRecorder) SetServiceMonitorAsDesired(sm, devConfig any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetServiceMonitorAsDesired", reflect.TypeOf((*MockMetricsExporter)(nil).SetServiceMonitorAsDesired), sm, devConfig)
}

// SetStaticAuthSecretAsDesired mocks base method.
func (m *MockMetricsExporter) SetStaticAuthSecretAsDesired(secret *v11.Secret, devConfig *v1alpha1.DeviceConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStaticAuthSecretAsDesired", secret, devConfig)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStaticAuthSecretAsDesired indicates an expected call of SetStaticAuthSecretAsDesired.
func (mr *MockMetricsExporterMockRecorder) SetStaticAuthSecretAsDesired(secret, devConfig any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStaticAuthSecretAsDesired", reflect.TypeOf((*MockMetricsExporter)(nil).SetStaticAuthSecretAsDesired), secret, devConfig)
}
