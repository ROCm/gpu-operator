/*
Copyright (c) Advanced Micro Devices, Inc. All rights reserved.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by MockGen. DO NOT EDIT.
// Source: kmmmodule.go
//
// Generated by this command:
//
//	mockgen -source=kmmmodule.go -package=kmmmodule -destination=mock_kmmmodule.go KMMModuleAPI
//
// Package kmmmodule is a generated GoMock package.
package kmmmodule

import (
	context "context"
	reflect "reflect"

	v1alpha1 "github.com/ROCm/gpu-operator/api/v1alpha1"
	v1beta1 "github.com/rh-ecosystem-edge/kernel-module-management/api/v1beta1"
	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/api/apps/v1"
	v10 "k8s.io/api/core/v1"
)

// MockKMMModuleAPI is a mock of KMMModuleAPI interface.
type MockKMMModuleAPI struct {
	ctrl     *gomock.Controller
	recorder *MockKMMModuleAPIMockRecorder
}

// MockKMMModuleAPIMockRecorder is the mock recorder for MockKMMModuleAPI.
type MockKMMModuleAPIMockRecorder struct {
	mock *MockKMMModuleAPI
}

// NewMockKMMModuleAPI creates a new mock instance.
func NewMockKMMModuleAPI(ctrl *gomock.Controller) *MockKMMModuleAPI {
	mock := &MockKMMModuleAPI{ctrl: ctrl}
	mock.recorder = &MockKMMModuleAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKMMModuleAPI) EXPECT() *MockKMMModuleAPIMockRecorder {
	return m.recorder
}

// SetBuildConfigMapAsDesired mocks base method.
func (m *MockKMMModuleAPI) SetBuildConfigMapAsDesired(buildCM *v10.ConfigMap, devConfig *v1alpha1.DeviceConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBuildConfigMapAsDesired", buildCM, devConfig)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBuildConfigMapAsDesired indicates an expected call of SetBuildConfigMapAsDesired.
func (mr *MockKMMModuleAPIMockRecorder) SetBuildConfigMapAsDesired(buildCM, devConfig any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBuildConfigMapAsDesired", reflect.TypeOf((*MockKMMModuleAPI)(nil).SetBuildConfigMapAsDesired), buildCM, devConfig)
}

// SetDevicePluginAsDesired mocks base method.
func (m *MockKMMModuleAPI) SetDevicePluginAsDesired(ds *v1.DaemonSet, devConfig *v1alpha1.DeviceConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDevicePluginAsDesired", ds, devConfig)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDevicePluginAsDesired indicates an expected call of SetDevicePluginAsDesired.
func (mr *MockKMMModuleAPIMockRecorder) SetDevicePluginAsDesired(ds, devConfig any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDevicePluginAsDesired", reflect.TypeOf((*MockKMMModuleAPI)(nil).SetDevicePluginAsDesired), ds, devConfig)
}

// SetKMMModuleAsDesired mocks base method.
func (m *MockKMMModuleAPI) SetKMMModuleAsDesired(ctx context.Context, mod *v1beta1.Module, devConfig *v1alpha1.DeviceConfig, nodes *v10.NodeList) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetKMMModuleAsDesired", ctx, mod, devConfig, nodes)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetKMMModuleAsDesired indicates an expected call of SetKMMModuleAsDesired.
func (mr *MockKMMModuleAPIMockRecorder) SetKMMModuleAsDesired(ctx, mod, devConfig, nodes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetKMMModuleAsDesired", reflect.TypeOf((*MockKMMModuleAPI)(nil).SetKMMModuleAsDesired), ctx, mod, devConfig, nodes)
}

// SetNodeVersionLabelAsDesired mocks base method.
func (m *MockKMMModuleAPI) SetNodeVersionLabelAsDesired(ctx context.Context, devConfig *v1alpha1.DeviceConfig, nodes *v10.NodeList) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNodeVersionLabelAsDesired", ctx, devConfig, nodes)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetNodeVersionLabelAsDesired indicates an expected call of SetNodeVersionLabelAsDesired.
func (mr *MockKMMModuleAPIMockRecorder) SetNodeVersionLabelAsDesired(ctx, devConfig, nodes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNodeVersionLabelAsDesired", reflect.TypeOf((*MockKMMModuleAPI)(nil).SetNodeVersionLabelAsDesired), ctx, devConfig, nodes)
}
